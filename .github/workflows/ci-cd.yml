name: Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  compilar-y-probar:
    name: Compilar y Probar
    runs-on: ubuntu-latest
    
    steps:
    - name: Obtener código
      uses: actions/checkout@v4
      
    - name: Configurar .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restaurar dependencias
      run: dotnet restore botilleria-clean-architecture-api.csproj
      
    - name: Compilar proyecto
      run: dotnet build botilleria-clean-architecture-api.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
      
    - name: Ejecutar pruebas
      run: |
        if dotnet test --list-tests 2>&1 | grep -q "Test run"; then
          echo "Ejecutando pruebas..."
          dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" || echo "Las pruebas fallaron pero se continúa..."
        else
          echo "No se encontraron pruebas en el proyecto. Omitiendo ejecución de pruebas."
          echo "Para agregar pruebas, crea un proyecto de pruebas con: dotnet new xunit -n YourProject.Tests"
        fi
      continue-on-error: true
      
    - name: Publicar resultados de pruebas
      uses: dorny/test-reporter@v1
      if: always() && hashFiles('**/test-results.trx') != ''
      with:
        name: Resultados de Pruebas
        path: '**/test-results.trx'
        reporter: dotnet-trx
        fail-on-error: false
        
    - name: Notificación de compilación exitosa
      if: success()
      run: echo "Compilación y pruebas completadas exitosamente"
      
    - name: Notificación de compilación fallida
      if: failure()
      run: echo "La compilación o las pruebas fallaron. Por favor revisa los logs."

  calidad-codigo:
    name: Verificación de Calidad de Código
    runs-on: ubuntu-latest
    
    steps:
    - name: Obtener código
      uses: actions/checkout@v4
      
    - name: Configurar .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Verificar formato de código
      run: dotnet format botilleria-clean-architecture-api.csproj --verify-no-changes --verbosity diagnostic || true
      continue-on-error: true
      
    - name: Verificar advertencias de compilación
      run: dotnet build botilleria-clean-architecture-api.csproj --configuration ${{ env.BUILD_CONFIGURATION }}

  escaneo-seguridad:
    name: Escaneo de Seguridad
    runs-on: ubuntu-latest
    
    steps:
    - name: Obtener código
      uses: actions/checkout@v4
      
    - name: Configurar .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Ejecutar escaneo de seguridad
      run: |
        dotnet restore botilleria-clean-architecture-api.csproj
        dotnet list botilleria-clean-architecture-api.csproj package --vulnerable --include-transitive 2>&1 || true
        dotnet list botilleria-clean-architecture-api.csproj package --deprecated 2>&1 || true

  resumen:
    name: Resumen de Ejecución
    runs-on: ubuntu-latest
    needs: [compilar-y-probar, calidad-codigo, escaneo-seguridad]
    if: always()
    
    steps:
    - name: Generar resumen
      run: |
        echo "## Resumen del Pipeline CI/CD" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Pipeline ejecutado completamente" >> $GITHUB_STEP_SUMMARY
        echo "- Estado de Compilación: ${{ needs.compilar-y-probar.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Calidad de Código: ${{ needs.calidad-codigo.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Escaneo de Seguridad: ${{ needs.escaneo-seguridad.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Información del Proyecto" >> $GITHUB_STEP_SUMMARY
        echo "- Versión de .NET: ${{ env.DOTNET_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- Configuración: ${{ env.BUILD_CONFIGURATION }}" >> $GITHUB_STEP_SUMMARY
        echo "- Rama: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
